import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
EXCLUDE_DIRS = ['node_modules', '.git', 'dist', '.next']

def generate_directory_tree(start_path, output_file, exclude_dirs=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –ø–∏—à–µ—Ç –µ–≥–æ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª.
    """
    if exclude_dirs is None:
        exclude_dirs = EXCLUDE_DIRS

    output_file.write("# Project Directory Structure\n\n")

    for root, dirs, files in os.walk(start_path):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        level = root.replace(start_path, '').count(os.sep)
        indent = '  ' * level

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        rel_path = os.path.relpath(root, start_path)
        if rel_path == '.':
            output_file.write(f"{indent}üìÅ ./\n")
        else:
            dir_name = os.path.basename(root)
            output_file.write(f"{indent}üìÅ {dir_name}/\n")

        # –§–∞–π–ª—ã
        sub_indent = '  ' * (level + 1)
        for file in sorted(files):
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: —É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã ```
            if file.endswith(('.tsx', '.ts', '.json', '.js', '.css', '.html', '.png')):
                output_file.write(f"{sub_indent}üìÑ {file}\n")

    output_file.write("\n\n# File Contents\n\n")


def main():
    # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    current_directory = os.getcwd()

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_filename = 'files_with_code.txt'

    with open(output_filename, 'w', encoding='utf-8') as output:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        generate_directory_tree(current_directory, output, EXCLUDE_DIRS)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(current_directory):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]

            for filename in files:
                # –ú—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ png, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                if filename.endswith(('.tsx', '.ts', '.json', '.js', '.css', '.html')):
                    if "package-lock" in filename:
                        continue

                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    rel_path = os.path.relpath(os.path.join(root, filename), current_directory)

                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                    output.write(f'File: {rel_path}\n')
                    output.write('=' * 80 + '\n')

                    file_path = os.path.join(root, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as file:
                            code = file.read()
                            output.write(code + '\n\n')
                            output.write('-' * 80 + '\n\n')
                    except Exception as e:
                        output.write(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {rel_path}: {e}\n\n')
                        output.write('-' * 80 + '\n\n')

    print(f'–î–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –∫–æ–¥ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {output_filename}')


if __name__ == "__main__":
    main()